service: github-dashboard-auth-service

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"    
  stage: ${self:custom.currentStage}
  logRetentionInDays: 30
  timeout: 30
  environment:
    region: ${file(./config/serverless.config.${self:custom.currentStage}.yml):region}
    githubClientId: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubClientId}
    githubClientSecretId: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubClientSecretId}
    dynamoDBEndpoint: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBEndpoint}
    dynamoDBaccessKey: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBaccessKey}
    dynamoDBaccessSecret: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBaccessSecret}    
  apiGateway:
    restApiId: ${cf:apigateway-service-dev.ApiGatewayId}
    restApiRootResourceId: ${cf:apigateway-service-dev.ApiGatewayRootResourceId}

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  serverless-offline:
    port: 5004

functions:
  GITHUB-DASHBOARD-AUTH-SERVICE:
    name: 'GITHUB-DASHBOARD-AUTH-SERVICE_${self:custom.currentStage}'
    description: Authenticate with github
    handler: src/index.handler
    events:
      - http:
          path: /github-dashboard/auth/login
          method: post
          cors: true 

# resources:
#   Resources:
#     UsersTable:
#       Type: "AWS::DynamoDB::Table"
#       Properties:
#         TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):usersTableName}
#         AttributeDefinitions:
#           - AttributeName: "email"
#             AttributeType: "S"
#           - AttributeName: "name"
#             AttributeType: "S" 
#           - AttributeName: "token"
#             AttributeType: "S" 
#           - AttributeName: "expiresAt"
#             AttributeType: "S"                                           
#         KeySchema:
#           - AttributeName: "email"
#             KeyType: "HASH"
#         BillingMode: PAY_PER_REQUEST  
#     TokenTable:
#       Type: "AWS::DynamoDB::Table"
#       Properties:
#         TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):tokenTableName}
#         AttributeDefinitions:
#           - AttributeName: "token"
#             AttributeType: "S"
#           - AttributeName: "expiresAt"
#             AttributeType: "S"              
#         KeySchema:
#           - AttributeName: "token"
#             KeyType: "HASH"
#         BillingMode: PAY_PER_REQUEST                    
plugins:
 - serverless-offline
