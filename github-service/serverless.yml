service: github-dashboard-service

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"    
  stage: ${self:custom.currentStage}
  logRetentionInDays: 30
  timeout: 30
  environment:
    region: ${file(./config/serverless.config.${self:custom.currentStage}.yml):region}
    cipherKey: ${file(./config/serverless.config.${self:custom.currentStage}.yml):cipherKey}
    githubRequestsTableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubRequestsTableName}
    dynamoDBEndpoint: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBEndpoint}
    dynamoDBaccessKey: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBaccessKey}
    dynamoDBaccessSecret: ${file(./config/serverless.config.${self:custom.currentStage}.yml):dynamoDBaccessSecret}    
    githubAppName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubAppName}    
    githubClientId: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubClientId}
    githubClientSecretId: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubClientSecretId}
    userDataServiceEndpoint: ${file(./config/serverless.config.${self:custom.currentStage}.yml):userDataServiceEndpoint}
  apiGateway:
    restApiId: ${cf:apigateway-service-dev.ApiGatewayId}
    restApiRootResourceId: ${cf:apigateway-service-dev.ApiGatewayRootResourceId}

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  serverless-offline:
    port: 5005

functions:
  GITHUB-DASHBOARD-SERVICE:
    name: 'GITHUB-DASHBOARD-SERVICE_${self:custom.currentStage}'
    description: Wraper for github api
    handler: src/index.handler
    events:
      - http:
          path: /github/{proxy+}
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - Content-Length
              - X-Requested-With
              - User-Id
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
resources:
  Resources:
    GithubRequestsTableName:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${file(./config/serverless.config.${self:custom.currentStage}.yml):githubRequestsTableName}
        AttributeDefinitions:
          -
            AttributeName: "token"
            AttributeType: "S"
          -
            AttributeName: "key"
            AttributeType: "S"                  
        KeySchema:
          -
            AttributeName: "token"
            KeyType: "HASH"
          -
            AttributeName: "key"
            KeyType: "RANGE"                                 
        BillingMode: PAY_PER_REQUEST  
                                  
plugins:
 - serverless-offline
